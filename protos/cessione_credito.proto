
syntax = "proto3";

message PropostaCessioneState {

    enum StatoPropostaCessione {
        PREPARAZIONE = 0;
        PROPOSTA = 1;
        PRESA_IN_CARICO = 2;
        VALIDATA = 3;
        ACQUISTATA = 4;
        INVALIDATA = 5;
        CONTRATTO_DA_FIRMARE = 6;
        CONTRATTO_FIRMATO = 7;
        DA_LIQUIDARE = 8;
        LIQUIDATA = 9;
    }

    int32 id = 1;
    TipologiaCessione tipologia = 2;
    StatoPropostaCessione stato = 3;
    // id del cedente
    int32 id_cedente = 4;
    // id del gruppo acquirente 
    int32 id_gruppo_acquirente = 5;
    // id del sal selezionato per la proposta
    int32 id_sal = 6;
    // se la proposta è gestita con meccanismo di borsa credito o meno
    bool borsa_credito = 7;
    // id dell'acquirente che si aggiudica la proposta (caso borsa del credito)
    int32 id_acquirente_borsa = 8;
    string data_creazione = 9;
    string note = 10;
    // valore in cent di €
    uint32 importo = 11;
    // valore in cent di € 
    uint32 credito = 12;
    // map<id_offerta, offerta> offerte
    map<int32, OffertaProposta> offerte = 13;
    // map<id_file_documento, sha512 documento> file documenti
    map<int32, HashedFile> documenti = 14;
     // map<id_file_contratto, sha512 contratto> file contratti
    map<int32, HashedFile> contratti = 15;
}

enum TipologiaCessione {
    PREISTRUTTORIA_110 = 0;
    ISTRUTTORIA_110 = 1;
    ISTRUTTORIA_BONUS = 2;
}

enum StatoOffertaProposta {
    DA_VALUTARE = 0;
    ACCETTATA = 1;
    RIFIUTATA = 2;
}

message OffertaProposta {
    int32 id = 1;
    int32 id_acquirente = 2;
    StatoOffertaProposta stato = 3;
    // entità dell'offerta in cent di €
    uint32 valore = 4;
    string data_creazione = 5;
    string data_ultimo_aggiornamento = 6;
}

message HashedFile {
    int32 id = 1;
    string hash = 2;
}

message PropostaCessionePayload {
    // payload per aggiornare lo stato della proposta, opzionalmente si possono specificare delle note
    message AggiornamentoStato {
        int32 id_proposta = 1;
        PropostaCessioneState.StatoPropostaCessione nuovo_stato = 2;
        string note = 3;
        int32 id_acquirente_borsa = 4;
    }
    // payload per caricare nuove offerte o aggiornare quelle esistenti (a seconda )
    message AggiornamentoOfferte {
        int32 id_proposta = 1;
        repeated OffertaProposta offerte_aggiornate = 2;
    }
    // // payload per caricare nuove hash di documenti o aggiornare quelli esistenti
    // message AggiornamentoDocumenti {
    //     int32 id_proposta = 1;
    //     repeated HashedFile documenti_aggiornati = 2;
    // }
    // // payload per caricare nuove hash di contratti o aggiornare quelli esistenti
    // message AggiornamentoContratti {
    //     int32 id_proposta = 1;
    //     repeated HashedFile contratti_aggiornati = 2;
    // }
    // payload per caricare nuove hash di file o aggiornare quelli esistenti
    message EliminazioneOfferte {
        int32 id_proposta = 1;
        repeated int32 id_offerte = 2;
    }

    message AggiornamentoFile {
        int32 id_proposta = 1;
        repeated HashedFile file_aggiornati = 2;
    }

    enum PayloadType {
        PAYLOAD_TYPE_UNSET = 0;
        CREAZIONE_PROPOSTA = 1;
        AGGIORNAMENTO_STATO = 2;
        AGGIORNAMENTO_OFFERTE = 3;
        AGGIORNAMENTO_DOCUMENTI = 4;
        AGGIORNAMENTO_CONTRATTI = 5;
        ELIMINAZIONE_OFFERTE = 6;
    }

    PayloadType type = 1;
    bytes data = 2;
}

message RichiestaAccreditamentoState {

    enum StatoRichiestaAccreditamento {
        PREPARAZIONE = 0;
        DA_VALIDARE = 1;
        ACCREDITATO = 2;
        NON_VALIDO = 3;
    }

    int32 id = 1;
    StatoRichiestaAccreditamento stato = 2;
    // id del cedente
    int32 id_cedente = 3;
    // id del gruppo acquirente a cui viene fatta la richiesta
    int32 id_gruppo_acquirente = 4;
    // se la richiesta è per accreditarsi alla borsa del credito
    bool borsa_credito = 5;
    string data_creazione = 6;
    string data_accreditamento = 7;
    string note = 8;
    // map<id_file_documento, sha512 documento> file documenti
    map<int32, HashedFile> documenti = 9;
}

message RichiestaAccreditamentoPayload {
    // payload per aggiornare lo stato della richiesta, opzionalmente si possono specificare delle note
    message AggiornamentoStato {
        int32 id_richiesta = 1;
        RichiestaAccreditamentoState.StatoRichiestaAccreditamento nuovo_stato = 2;
        string note = 3;
        string data_accreditamento = 4;
    }
    
    // payload per caricare nuove hash di documenti o aggiornare quelli esistenti
    // message AggiornamentoDocumenti {
    //     int32 id_richiesta = 1;
    //     repeated HashedFile documenti_aggiornati = 2;
    // }

    // payload per caricare nuove hash di file o aggiornare quelli esistenti
    message AggiornamentoFile {
        int32 id_richiesta = 1;
        repeated HashedFile file_aggiornati = 2;
    }

    enum PayloadType {
        PAYLOAD_TYPE_UNSET = 0;
        CREAZIONE_RICHIESTA = 1;
        AGGIORNAMENTO_STATO = 2;
        AGGIORNAMENTO_DOCUMENTI = 3;
    }

    PayloadType type = 1;
    bytes data = 2;
}

message Utente {

    enum Ruolo {
        CEDENTE = 0;
        ACQUIRENTE = 1;
        VALIDATORE = 2;
        REVISORE_FISCALE = 3;
    }

    string public_key = 1;
    int32 id = 2;
    Ruolo ruolo = 3;
    int32 id_gruppo_acquirente = 4;
}
